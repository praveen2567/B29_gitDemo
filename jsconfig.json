// No, IntelliSense is not an IDE. IntelliSense is a code completion and helpful 
// feature within an IDE (Integrated Development Environment). 
// It provides real-time code completion, parameter information, 
// quick info, and member lists to enhance the coding experience

//  Step-by-Step: How to Get IntelliSense Working in VS Code for JavaScript


// Enable JavaScript IntelliSense in Settings
// Press Ctrl + , (or Cmd + , on Mac) to open Settings.
// In the search bar, type:
// javascript.suggest.enabled
// Make sure it is checked/enabled.


// Create a jsconfig.json File (For Better IntelliSense)
// If you're working in a project folder, you should add this file:
// Go to the root of your project folder.
// Create a new file named jsconfig.json.
// Paste the following basic config:


{
  "compilerOptions": {
    "checkJs": true,      // ‚úÖ Enable type checking
    "noEmit": true        // ‚úÖ Don't compile anything (JS doesn‚Äôt need compiling)
  },
  "include": ["./**/*.js"]  // ‚úÖ Apply to all JS files in the project
}



//  Install ESLint (Recommended)
// ESLint helps you catch typos like .lengh early.
// Open the Extensions panel (Ctrl+Shift+X)
// Search for "ESLint" and install it (by Dirk Baeumer)
// Then open the terminal and type:
// npm install eslint --save-dev
// Create a config:
// npx eslint --init
// Follow the prompts (choose JavaScript, CommonJS, browser, etc.)
// Now, VS Code will underline typos like arr.lengh right away.


// if you have any mistakes like syntax hard to catch errors
// 2Ô∏è‚É£ Run ESLint in Terminal
// In your terminal (inside the project folder), run:
// npx eslint test.js

// 3Ô∏è‚É£ üß† ESLint Output
// It should show an error like:
// error  'lengh' is not a valid property
// This confirms ESLint is catching mistakes like typos ‚úÖ


// Bonus: Auto-Fix Issues (if possible)
// You can also try:
// npx eslint test.js --fix
// It won‚Äôt fix typos like lengh, but it will fix things like missing semicolons or indentation issues.